#!/bin/bash
RC="\033[38;5;196m"; RR="\033[31m"; GC="\033[38;5;82m"; LG="\033[38;5;72m"; BC="\033[39;1;34m"; SB="\033[38;5;45m"
CC="\033[38;5;208m"; PC="\033[38;5;201m"; YC="\033[38;5;148m"; ED="\033[0m";
function echoRC {
    echo -e "$RC${1}$ED"
}
function echoRR {
    echo -e "$RR${1}$ED"
}
function echoGC {
    echo -e "$GC${1}$ED"
}
function echoLG {
    echo -e "$LG${1}$ED"
}
function echoBC {
    echo -e "$BC${1}$ED"
}
function echoSB {
    echo -e "$SB${1}$ED"
}
function echoCC {
    echo -e "$CC${1}$ED"
}
function echoPC {
    echo -e "$PC${1}$ED"
}
function echoYC {
    echo -e "$YC${1}$ED"
}
OLS_ROOT=/usr/local/lsws
OLS_CONF_DIR=$OLS_ROOT/conf
VH_DOMAIN_FILE=$OLS_CONF_DIR/vhosts.conf
DOWNLOAD_URL=https://raw.githubusercontent.com/mina998/lswp2/main/httpd
VHOST_CONF_DIR=$OLS_CONF_DIR/vhosts
RUN_PATH=/home
DOC_DIR_NAME=public_html
DB_SQL_NAME=db.sql
if [ ! -f "$OLS_ROOT/bin/lswsctrl" ]; then
    echoRR "OpenLiteSpeed未安装"
    exit 1
fi
function random_str {
    local length=10
    [ -n "$1" ] && length=$1
    echo $(head -c $length /dev/urandom | base64 | tr -d '/' | tr -d '=')
}
function alias_from_domain {
    echo "$1" | sed 's/\-/_/g; s/\./_/g'
}
function is_db_exist {
    echo $(mysql -Nse "show DATABASES like '$1'")
}
function query_public_ip {
    echo $(curl -s https://ip.idsss.workers.dev)
}
function verify_domain {
    while true; do
        echo -ne "$BC请输入域名(eg:www.demo.com):$ED "
        read -r INPUT_VALUE
        INPUT_VALUE=$(echo $INPUT_VALUE | tr 'A-Z' 'a-z')
        INPUT_VALUE=$(echo $INPUT_VALUE | awk '/^[a-z0-9][-a-z0-9]{0,62}(\.[a-z0-9][-a-z0-9]{0,62})+$/{print $0}')
        if [ -z "$INPUT_VALUE" ]; then
            echoYC "域名有误,请重新输入!!!"
            continue
        fi
        local is_bind_site=0
        local domain_list=$(grep -o 'vhDomain.*' "$VH_DOMAIN_FILE" | grep -oE "[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}")
        for item in $domain_list; do
            if [ "$INPUT_VALUE" = "$item" ]; then
                is_bind_site=1
            fi
        done
        if [ $is_bind_site -eq 1 ]; then
            echoCC '域名已绑定到其它虚拟机.'
            continue
        fi
        local alias=$(alias_from_domain $INPUT_VALUE)
        if [ -d "/home/$alias" ]; then
            echoCC "[$INPUT_VALUE]站点已存在."
            continue
        fi
        break
    done
}
function query_vm_alias {
    HOST_NAME=''
    local vhost_list=(`grep 'member' "$VH_DOMAIN_FILE" | awk -F 'member | {' '{print $2}'`)
    i=0
    while [[ $i -lt ${#vhost_list[@]} ]]; do
        echo -e "${CC}${i})${ED} ${vhost_list[$i]}"
        let i++ 
    done
    if [ $i -eq 0 ]; then
        echoCC "没有可选站点."
    else
        echo -e "${YC}e${CC})${ED} ${LG}Back${ED}"
    fi
    while [[ $i -gt 0 ]] ; do
        echo -ne "${BC}请选择虚拟机,输入序号:${ED}"
        read num
        if [ "$num" = 'e' ]; then
            break
        fi
        expr $num - 1 &> /dev/null
        if [ $? -lt 2 ]; then
            [ -n "${vhost_list[$num]}" ] && HOST_NAME=${vhost_list[$num]} && break
        fi
        echoYC "输入有误."
    done
}
function drop_db_tables {
    local db_name=$1
    if [ ! -n "$(is_db_exist $db_name)" ]; then
        echoCC "数据库不存在."
        return $?
    fi
    local conn="mysql -D$db_name -s -e"
    local drop=$($conn "SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') FROM information_schema.tables WHERE table_schema = '${db_name}'")
    $($conn "SET foreign_key_checks = 0; ${drop}")
}
function reset_ols_user_password {
    echoCC "面板用户密码重置成功后.原有的所有用户将删除."
    local user; local pass1; local pass2
    while true; do
        echo -ne "${BC}输入账号(默认:admin): ${ED}"
        read -a user
        [ -z "$user" ] && user=admin
        [ $(expr "$user" : '.*') -ge 5 ] && break
        echoCC "账号长度不能小于5位."
    done
    while true; do
        echo -ne "${BC}输入密码: ${ED}"
        read -a pass1
        if [ `expr "$pass1" : '.*'` -lt 6 ]; then
            echoCC "密码长度不能小于6位."
            continue
        fi
        echo -ne "${BC}密码确认: ${ED}" 
        read -a pass2
        if [ "$pass1" != "$pass2" ]; then
            echoCC "密码不匹配,再试一次."
            continue
        fi
        break
    done
    cd $OLS_ROOT/admin/fcgi-bin
    local encrypt_pass=$(./admin_php -q ../misc/htpasswd.php $pass1)
    echo "$user:$encrypt_pass" > ../conf/htpasswd
    cd $RUN_PARH
    echoGC "面板用户密码重置完成."
}
function dns_query {
    local vhost=$1
    local local_ip=$(query_public_ip)
    if (ping -c 2 $vhost &>/dev/null); then
        local domain_ip=$(ping $vhost -c 1 | sed '1{s/[^(]*(//;s/).*//;q}')
        if [ "$local_ip" != "$domain_ip" ]; then
            echo $domain_ip
        fi
    else
        echo '0.0.0.0'
    fi
}
function install_wp {
    echo -ne "$BC请输入站点管理员账号(默认:admin):$ED "
    read -a wp_user; [ -z "$wp_user" ] && wp_user=admin 
    echo -ne "$BC请输入站点管理员密码(默认:admin):$ED "
    read -a wp_pass; [ -z "$wp_pass" ] && wp_pass=admin
    echo -ne "$BC请输入站点管理员邮箱(默认:admin@$INPUT_VALUE):$ED "
    read -a wp_mail; [ -z "$wp_mail" ] && wp_mail="admin@$INPUT_VALUE"
    wp core download --allow-root
    curl $DOWNLOAD_URL/htaccess > .htaccess
    local db_name; local db_user; local db_pass; eval "$1" "$2" "$3"
    local db_prefix=$(random_str 2)_
    wp config create --dbname=$db_name --dbuser=$db_user --dbpass=$db_pass --dbprefix=$db_prefix --allow-root --quiet
    wp core install --url="http://$INPUT_VALUE" --title="My Blog" --admin_user=$wp_user --admin_password=$wp_pass --admin_email=$wp_mail --skip-email --allow-root
    local wp_const="\ndefine('WP_POST_REVISIONS', false);"
    sed -i "/\$table_prefix/a\\$wp_const" wp-config.php
}
function create_site {
    cd $RUN_PARH
    verify_domain
    local alias=$(alias_from_domain $INPUT_VALUE)
    local site_root=/home/$alias
    local db_pass=$(random_str 10)
    if [ -n "$(is_db_exist $alias)" ]; then
        echoCC "数据库已存在."
        return $?
    fi
    mysql -Nse "CREATE DATABASE \`${alias}\`"
    mysql -Nse "CREATE USER '${alias}'@'localhost' IDENTIFIED BY '${db_pass}'"
    mysql -Nse "GRANT ALL PRIVILEGES ON \`${alias}\`.* TO '${alias}'@'localhost'"
    mysql -Nse "FLUSH PRIVILEGES"
    if ! (id $alias &> /dev/null);then
        useradd -s /sbin/nologin -r $alias
    fi
    mkdir -p ${site_root}/{backup,logs,cert,$DOC_DIR_NAME}
    cd ${site_root}/${DOC_DIR_NAME}
    echo -ne "$BC是否安装WordPrss(y/N):$ED "
    read -a iswp
    if [ "$iswp" = "y" -o "$iswp" = "Y" ]; then
        install_wp "db_name=$alias" "db_user=$alias" "db_pass=$db_pass"
    else
        echo 'This a Temp Site.' > index.php
    fi
    chown -R $alias:$alias ${site_root}
    chown -R $alias:nogroup ${site_root}/${DOC_DIR_NAME}
    chmod 711 ${site_root}
    chmod 750 ${site_root}/${DOC_DIR_NAME}
    if [ -e .htaccess ]; then
        chown -R $alias:$alias .htaccess
    fi
    find ${site_root}/${DOC_DIR_NAME}/ -type d -exec chmod 750 {} \;
    find ${site_root}/${DOC_DIR_NAME}/ -type f -exec chmod 640 {} \;
    echo -e "member $alias { \n\t vhDomain  \t $INPUT_VALUE \n}" >> $OLS_CONF_DIR/vhosts.conf
    systemctl restart lsws
    echoGC "站点安装完成, ${CC}以下信息只显示一次."
    echoSB "地址: http://$INPUT_VALUE"
    if [ -n "$wp_user" ]; then
        echoSB "账号: $wp_user"
        echoSB "密码: $wp_pass"
    fi
    echoGC "数据库信息"
    echoSB "名称: ${alias}"
    echoSB "账号: ${alias}"
    echoSB "密码: ${db_pass}"
}
function backup_site {
    cd $SITE_DOC_DIR
    if [ ! -n "$(is_db_exist $HOST_NAME)" ]; then
        echoCC "数据库不存在."
        return $?
    fi
    mysqldump $HOST_NAME > $DB_SQL_NAME
    if [ $? -ne 0 ]; then
        echoCC '备份数据库失败'
        return $?
    fi
    cd $SITE_BACKUP
    local web_save_name=$(date +%Y-%m-%d.%H%M%S).web.7z
    7z a -mx=9 $web_save_name $SITE_DOC_DIR
    if [ $? -ne 0 ]; then
        echoCC '打包文件失败.不完整'
        return $?
    fi
    rm $SITE_DOC_DIR/$DB_SQL_NAME
    echoSB "备份文件列表, 总容量: $(du -sh)"
    ls -ghGA | awk 'BEGIN{OFS="\t"} NR > 1 {print $3, $7}'
    echoGC "备份完成."
}
function restore_site {
    cd $SITE_BACKUP
    if [ $(ls | wc -l) -eq 0 ]; then
        echoCC '没有备份文件'
        return $?
    fi
    echo -e "${SB}文件总大小:$ED $(du -sh)"
    ls -ghGA | awk 'BEGIN{OFS="\t"} NR > 1 {print $3, $7}'
    echo -ne "$BC请输入要还原的文件名: $ED"
    read -a site_backup_file
    if [ -z $site_backup_file ] || [ ! -f $site_backup_file ]; then
        echoCC "$site_backup_file指定文件不存在"
        return $?
    fi
    if [[ ! $site_backup_file =~ .*\.7z$ ]]; then
        echoCC "[$site_backup_file]非指定的压缩格式"
        return $?
    fi
    if [ -d public_html ] ; then
        rm -rf public_html
    fi
    7z x $site_backup_file
    if [ ! -d public_html ] ; then
        echoCC "找不到指定目录"
        return 1
    fi
    cd public_html
    if [ ! -f $DB_SQL_NAME ]; then
        echoCC '找不到SQL文件'
        return $?
    fi
    drop_db_tables "$HOST_NAME"
    mysql "$HOST_NAME" < $DB_SQL_NAME
    rm $DB_SQL_NAME
    sed -i -r "s/DB_NAME',\s*'(.+)'/DB_NAME', '$HOST_NAME'/" wp-config.php
    sed -i -r "s/DB_USER',\s*'(.+)'/DB_USER', '$HOST_NAME'/" wp-config.php
    local wp_config=$SITE_DOC_DIR/wp-config.php
    if [ -f "$wp_config" ]; then
        local original_db_password=$(grep -oE "DB_PASSWORD.*[\"\']{1}" "$wp_config" | sed -r '{s/.*,\s*//}' | sed s/[\'\"]*//g)
        sed -i -r "s/DB_PASSWORD',\s*'(.+)'/DB_PASSWORD', '$original_db_password'/" wp-config.php
    fi
    rm -rf $SITE_DOC_DIR/{.[!.],}*
    mv ./{.[!.],}* $SITE_DOC_DIR/ > /dev/null 2>&1
    cd .. && rm -rf public_html
    cd $SITE_ROOT
    chown -R $HOST_NAME:nogroup $DOC_DIR_NAME/*
    find $DOC_DIR_NAME/ -type d -exec chmod 750 {} \;
    find $DOC_DIR_NAME/ -type f -exec chmod 640 {} \;
    service lsws restart
    echoGC '操作完成.'
}
function delete_site {
    echoCC "请把文件备份到本地,将删除站点[$HOST_NAME]全部资料"
    echo -ne "${BC}确认完全删除站点,输入大写Y: ${ED}"; read -a ny1
    echo -ne "${BC}确认完全删除站点,输入小写y: ${ED}"; read -a ny2
    if [ "$ny2" != "y" -o "$ny1" != "Y" ]; then
        echoCC "已退出删除操作."
        return $?
    fi
    sed -i "/^member $HOST_NAME {/,/^}/d" $VH_DOMAIN_FILE
    echoGC "站点配置文件删除完成."
    rm -rf $SITE_ROOT
    echoGC "站点所有文件删除完成."
    pkill -u $HOST_NAME
    if id $HOST_NAME >/dev/null 2>&1; then
        userdel $HOST_NAME
    fi
    if [ -n $(is_db_exist "$HOST_NAME") ]; then
        local db_user=$(mysql -Nse "select distinct user from mysql.db where db = '$HOST_NAME';")
        if [ -n "$db_user" ]; then
            mysql -e "drop user '$db_user'@'localhost';"
        fi
        mysql -e "drop database $HOST_NAME;"
        echoGC "网站数据库已删除完成."
    else
        echoYC "[$HOST_NAME]数据库删除失败:不存在"
    fi
    menu 
    return $?
}
function delete_backup {
    cd $SITE_BACKUP
    if [ $(ls | wc -l) -eq 0 ]; then
        echoCC '没有备份文件'
        return $?
    fi
    local files=(`ls`)
    i=0
    while [[ $i -lt ${#files[@]} ]]; do
        echo -e "${CC}${i})${ED} ${files[$i]}"
        let i++ 
    done
    echo -e "${YC}e${CC})${ED} ${LG}Back${ED}"
    echo -ne "${BC}请输入序号以空格隔开:${ED}"
    local item=''
    read nums
    if [ "$nums" = "e" ]; then
        return $?
    fi
    for n in $nums; do
        item=${files[$n]}
        if [ -n "$item" ] && [ -f "$item" ]; then
            rm $item
        fi
    done
    echoCC '删除完成.'
}
function domain_add {
    local domain_str=`sed -n "/$HOST_NAME/{n;p}" $VH_DOMAIN_FILE`
    local domain_list=`echo $domain_str | awk '{print $2}'`
    echo -ne "${SB}已绑定域名列表: ${ED}"
    echoYC "$domain_list"
    verify_domain
    if [ -n "$INPUT_VALUE" ]; then
        sed -i "/$HOST_NAME/{n;s/.*/\t vhDomain \t $domain_list,$INPUT_VALUE/;}" $VH_DOMAIN_FILE
    else
        echoRR '添加域名失败'
        return $?
    fi
    domain_list=`sed -n "/$HOST_NAME/{n;p}" $VH_DOMAIN_FILE | awk '{print $2}'`
    echoLG "绑定成功: $domain_list"
    service lsws force-reload
}
function replace_db_domain {
    echo -ne "${SB}请输入(eg:${LG}old.com,new.com${ED}${SB}):${ED} "
    read rs_domain
    local old=`echo $rs_domain | awk -F',' '{print $1}'`
    local new=`echo $rs_domain | awk -F',' '{print $2}'`
    echo -ne "${YC}替换数据库中的域名. ${LG}${old} -> ${new}. [${PC}Y/n${ED}${LG}]:${ED} "
    read confirm
    if [ -z "$confirm" ] || [ "$confirm" = "Y" ] || [ "$confirm" = "y" ]; then
        wp search-replace $old $new --allow-root --path=$SITE_DOC_DIR
    fi
    return $?
}
function cert_ssl_install {
    local vm_domain_list=`sed -n "/$HOST_NAME/{n;p}" $VH_DOMAIN_FILE | awk '{print $2}'`
    echoCC "将为以下域名申请SSL证书:"
    echoSB "$vm_domain_list"
    local dns_domain_list=`echo $vm_domain_list | tr -d ' ' | tr ',' ' '`
    for item in $vm_bind_domains; do
        local dns_ip=$(dns_query "$item")
        if [ -n "$dns_ip" ]; then
             echoRR "[$item -> $dns_ip]:解析失败,该域名无法申请证书."
        else
            dns_domain_list[${#dns_domain_list[*]}]=$item
        fi
    done
    if [ ${#dns_domain_list[*]} -eq 0 ]; then
        echoCC '没有域名解析成功.'
        return $?
    fi
    local domain_list="-d $(echo ${dns_domain_list[@]} | sed 's/ / -d /g')"
    /root/.acme.sh/acme.sh --issue $domain_list --webroot $SITE_DOC_DIR
    local ssl=$SITE_ROOT/cert/ssl.pem
    local key=$SITE_ROOT/cert/key.pem
    local fullchain=$SITE_ROOT/cert/fullchain.pem
    /root/.acme.sh/acme.sh --install-cert $domain_list --cert-file $ssl --key-file $key --fullchain-file $fullchain --reloadcmd "service lsws force-reload"
    echo -e "${GC}证书文件:${ED} ${SB}$ssl ${ED}"
    echo -e "${GC}私钥文件:${ED} ${SB}$key ${ED}"
    echo -e "${GC}证书全链:${ED} ${SB}$fullchain ${ED}"
    service lsws restart
}
function site_cmd {
    cd $RUN_PATH
    query_vm_alias
    [ -z "$HOST_NAME" ] && return $?
    SITE_ROOT=$RUN_PATH/$HOST_NAME
    SITE_BACKUP=$SITE_ROOT/backup
    SITE_DOC_DIR=$SITE_ROOT/public_html
    while true; do
        echoCC "当前站点: $HOST_NAME"
        echo -e "${YC}1${ED}.${LG}备份${ED}"
        echo -e "${YC}2${ED}.${LG}还原${ED}"
        echo -e "${YC}3${ED}.${LG}删除备份${ED}"
        echo -e "${YC}4${ED}.${LG}删除站点${ED}"
        echo -e "${YC}5${ED}.${LG}追加域名${ED}"
        echo -e "${YC}6${ED}.${LG}安装证书${ED}"
        echo -e "${YC}7${ED}.${LG}替换数据库域名${ED}"
        echo -e "${YC}e${ED}.${LG}返回${ED}"
        echo -ne "${BC}请选择: ${ED}"
        read -a num2
        case $num2 in 
            1) backup_site ;;
            2) restore_site ;;
            3) delete_backup ;;
            4) delete_site ;;
            5) domain_add ;;
            6) cert_ssl_install ;;
            7) replace_db_domain ;;
            e) break ;;
            *) echoCC '输入有误.'
        esac
        continue
    done
    HOST_NAME=''
    cd $RUN_PARH
}
function menu {
    while true; do
        echoCC '请选译菜单'
        echo -e "${YC}1${ED}.${LG}添加一个站点${ED}"
        echo -e "${YC}2${ED}.${LG}常用站点指令${ED}"
        echo -e "${YC}3${ED}.${LG}重置面板用户密码${ED}"
        echo -e "${YC}e${ED}.${LG}退出${ED}"
        echo -ne "${YC}请选择: ${ED}"
        read -a num
        case $num in
            1) create_site ;;
            2) site_cmd ;;
            3) reset_ols_user_password ;;
            e) exit 0 ;;
            *) clear
        esac
        continue
    done
    clear
}
menu
